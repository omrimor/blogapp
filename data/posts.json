{"posts":[{"title":"AngularJS - Controllers","author":"Ilan Cohen","date":"1421186400000","tags":["JavaScript","AngularJS"],"mdPath":"data/posts/md/AngularJS - Controllers.md","htmlPath":"data/posts/html/AngularJS - Controllers.html","description":"In Angular, a Controller is a JavaScript constructor function that is used to augment the Angular Scope. When a Controller is attached to the DOM via the ng-controller directive, Angular will instantiate a new Controller object, using the specified Controller's constructor function. A new child scope will be available as an injectable parameter to the Controller's constructor function as $scope."},{"title":"Grunt - Custom Tasks","author":"Alex Ilyaev","date":"1418162400000","tags":["Grunt","Tools"],"mdPath":"data/posts/md/Grunt - Custom Tasks.md","htmlPath":"data/posts/html/Grunt - Custom Tasks.html","description":"Tasks are grunt's bread and butter. The stuff you do most often, like jshint or nodeunit. Every time Grunt is run, you specify one or more tasks to run, which tells Grunt what you'd like it to do. You can go crazy with tasks. If your tasks don't follow the 'multi task' structure, use a custom task."},{"title":"Grunt - Intro","author":"Alex Ilyaev","date":"1418162400000","tags":["Grunt","Tools"],"mdPath":"data/posts/md/Grunt - Intro.md","htmlPath":"data/posts/html/Grunt - Intro.html","description":"Grunt is a task-based command line build tool for JavaScript projects. Here’s the idea: when working on a JavaScript project, there are a bunch of things you’ll want to do regularly. Like what, you ask? Well, like concatenating given files, running JSHint on your code, running tests, or minifying your scripts."},{"title":"jQuery - Events, AJAX","author":"Amit Choukroun","date":"1417557600000","tags":["JavaScript","jQuery"],"mdPath":"data/posts/md/jQuery - Events, AJAX.md","htmlPath":"data/posts/html/jQuery - Events, AJAX.html","description":"jQuery Event methods trigger or attach a function to an event handler for the selected elements. These methods are used to register behaviors to take effect when the user interacts with the browser, and to further manipulate those registered behaviors."},{"title":"jQuery - Selectors, DOM","author":"Amit Choukroun","date":"1417384800000","tags":["JavaScript","jQuery"],"mdPath":"data/posts/md/jQuery - Selectors, DOM.md","htmlPath":"data/posts/html/jQuery - Selectors, DOM.html","description":"Borrowing from CSS 1–3, and then adding its own, jQuery offers a powerful set of tools for matching a set of elements in a document. There are also methods to manipulate the DOM in some manner. A few of those methods simply change one of the attributes of an element, while others set an element's style properties or modify entire elements."},{"title":"AngularJS - Modules","author":"Ilan Cohen","date":"1421186400000","tags":["JavaScript","AngularJS"],"mdPath":"data/posts/md/AngularJS - Modules.md","htmlPath":"data/posts/html/AngularJS - Modules.html","description":"You can think of a module as a container for the different parts of your app – controllers, services, filters, directives, etc. Most applications have a main method that instantiates and wires together the different parts of the application. Angular apps don't have a main method. Instead modules declaratively specify how an application should be bootstrapped.","mdSource":"Modules\n----------\n\n### What is a module?\n\n> You can think of a module as a container for the different parts of your app – Controllers, Services, Filters, Directives, etc.\n\n***\n\n### Why do we need it?\n\nMost applications have a main method that instantiates and wires together the different parts of the application.\n\nAngular apps don't have a main method. Instead, modules declaratively specify how an application should be bootstrapped. There are several advantages to this approach:\n\n* The declarative process is easier to understand.\n* You can package code as reusable modules.\n* The modules can be loaded in any order (or even in parallel) because modules delay execution.\n* Unit tests only have to load relevant modules, which keeps them fast.\n* End-to-end tests can use modules to override configuration.\n\n***\n\n### Recommended Setup\n\nBreak your application to multiple modules:\n\n* A module for each feature\n* A module for each reusable component (especially Directives and Filters)\n* An application level module which depends on the above modules and contains any initialization code.\n\n***\n\n### Module setup\n\nHTML:\n\n```handlebars\n<div ng-app=\"myApp\">\n\t<div>\n\t\t{{ 'World' | greet }}\n\t</div>\n</div>\n```\n\nJS:\n\n```js\n// Declare a module\nvar app = angular.module('myApp', []);\n\n// Configure the module\n// Adding a greeting filter\napp.filter('greet', function () {\n\treturn function (name) {\n\t\treturn 'Hello, ' + name + '!';\n\t};\n});\n```\n\n***\n\n### Dependency injection in modules\n\n```js\nvar app = angular.module('myApp', ['Module2', 'Module3']);\n```\n\nThat's how you include other modules as dependencies of the main one.\n\n- [More info on modules](https://docs.angularjs.org/guide/module)\n"},{"title":"AngularJS - Routes","author":"Ilan Cohen","date":"1421186400000","tags":["JavaScript","AngularJS"],"mdPath":"data/posts/md/AngularJS - Routes.md","htmlPath":"data/posts/html/AngularJS - Routes.html","description":"AngularJS routes enable you to create different URLs for different content in your application. Having different URLs for different content enables the user to bookmark URLs to specific content, and send those URLs to friends etc. In AngularJS each such bookmarkable URL is called a route.","mdSource":"Routes\n---------\n\n***\n\n### `routeProvider` API\n\nAllows create `routes`, so the app can have re-usable and linkable URLs like:\n`http://domain.com/#/deck/1/card/0`\n\n```js\nangular.module('app', ['ngRoute']);\n\n.config(['$routeProvider', function ($routeProvider) {\n\t$routeProvider\n\t\t.when('/decks', {\n\t\t\ttemplateUrl: 'partials/decks.html',\n\t\t\tcontroller: 'DecksController'\n\t\t})\n\t\t.when('/deck/:deckId/card/:cardId', {\n\t\t\ttemplateUrl: 'partials/card.html',\n\t\t\tcontroller: 'CardController'\n\t\t})\n\t\t.otherwise({\n\t\t\tredirectTo: '/'\n\t\t});\n}]);\n```\n\n***\n\n#### Notes:\n\nThere are two functions used to setup modules.\n\n- `.config()` - Setup app configuration (runs fist)\n- `.run()` - Run some app init code after all Services are ready\n\nAlso, `ngRoute` is a separate module that needs to be loaded after `angular.js` (download or load from a CDN)\n\n***\n\n### `routeParams`\n\nLet's say we have a route that looks like:\n\n```js\n$routeProvider.when('/deck/:deckId/card/:cardId', {});\n```\n\n`:deckId` and `:cardId` can be used as parameters inside the controllers:\n\n```js\nmyApp.controller('CardController', ['$scope', '$routeParams',\n\tfunction($scope, $routeParams) {\n\t\tvar cardId;\n\t\tvar deckId;\n\n\t\tfunction init() {\n\t\t\tcardId = parseInt($routeParams.cardId, 10);\n\t\t\tdeckId = parseInt($routeParams.deckId, 10);\n\t\t}\n\n\t\tinit();\n\t}]\n);\n```\n\n***\n\n### `ng-view`\n\n> `ng-view` is the glue between the route and the DOM.\n\nWhen a route is loaded, the HTML will be replaced with the Template, with an optional Controller to handle that Template Scope.\n\n__Usage:__\n\n```html\n<ng-view></ng-view>\n<!-- Or... -->\n<div ng-view></div>\n```\n\n- [Example](http://plnkr.co/edit/LRU5vzSrHpmpMtX3polb?p=preview)\n\n***\n\n### `ng-include`\n\n`ng-include` is the poorer cousin of `ng-view`.  It simply allows you to inject another piece of HTML into your template, like so:\n\n```html\n<ng-include src=\" 'header.html' \"></ng-include>\n```\n\nor...\n\n```html\n<div ng-include=\" 'header.html' \"></div>\n\n```\n\n- Note that the value it expects is an expression, so it could be a variable, a function call or a string with a file path (must be inside `''`)\n- The value itself can also be a reference to a template ID in the same file, or raw HTML\n\n***\n\n### Redirects\n\nOnce you have routes set up, you can tell one route to redirect to another.\n\nRedirect to specific route:\n\n```js\n.when('/home', {\n\tredirectTo : '/'\n});\n```\n\nRedirect if no route was matched (fallback)\n\n```js\n.otherwise({\n\tredirectTo : '/'\n});\n```\n\n***\n\n### `$routeChangeStart`\n\nAllows running some code when routes change.\n\nFor instance, if you want to redirect to the login page if the user isn't logged in, and redirect FROM the login page if the user is logged in.\n\n***\n\n```js\nmyApp.config(['$routeProvider', function ($routeProvider) {\n\t$routeProvider\n\t\t.when('/login', {\n\t\t\ttemplateUrl : 'login.html',\n\t\t\tisLogin : true\n\t\t})\n}]);\n\nmyApp.run(['$rootScope', '$location',\n\tfunction ($rootScope, $location, server) {\n\t\t\n\t// register listener to watch route changes\n\t$rootScope.$on(\"$routeChangeStart\",\n\t\tfunction (event, next, current) {\n\t\t\t\n\t\tif (!server.isLoggedIn() && !next.isLogin) {\n\t\t\t$location.path( \"/login\" );\n\t\t}\n\t\tif (server.isLoggedIn() && next.isLogin) {\n\t\t\t$location.path(\"/\");\n\t\t}\n\t});\n}]);\n```\n"},{"title":"AngularJS - Services","author":"Ilan Cohen","date":"1421186400000","tags":["JavaScript","AngularJS"],"mdPath":"data/posts/md/AngularJS - Services.md","htmlPath":"data/posts/html/AngularJS - Services.html","description":"Angular services are substitutable objects that are wired together using dependency injection (DI). You can use services to organize and share code across your app. Angular offers several useful services (like $http), but for most applications you'll also want to create your own.","mdSource":"Services\n----------\n\n***\n\n> Services are probably the easiest piece to understand in Angular. They're cross-application, and easy to inject and use.  A service is a nice name for an Angular singleton.\n\n***\n\n\n### Creating a Service\n\nWe use the same pattern we've seen a lot:\n\n```js\nmyApp.factory('myService', ['$location', function ($location) {\n\tfunction saveFn(){\n\n\t}\n\n\tfunction deleteFn(){\n\n\t}\n\n\treturn {\n\t\tsave: saveFn,\n\t\tdelete: deleteFn\n\t}\n}\n}]);\n```\n\n***\n\n### `service` vs. `factory`\n\nSometimes, you'll see this:\n\n```js\nmyApp.service('myService', [function () {}])\n```\n\nand sometimes this:\n\n```js\nmyApp.factory('myService', [function () {}]);\n```\n\nSo what's the difference?\n\n- [StackOverflow - angular.service vs angular.factory](http://stackoverflow.com/questions/14324451/angular-service-vs-angular-factory)\n\n__Bottom line:__\n\n- Any time you WOULD use `new`, use `service`\n- And if you WOULDN'T use `new`, use `factory`\n\n***\n\n### Use-cases for services\n\n* Utility functions\n* Server communication encapsulation\n* Managing your model across your app\n"}]}